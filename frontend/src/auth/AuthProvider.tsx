import { createContext,useContext,useMemo,useState } from 'react'
import { api } from '../services/api'
import type { UserToken } from './types'
function decodeJWT(token:string):UserToken|null{try{const p=JSON.parse(atob(token.split('.')[1]));return{sub:p.sub,email:p.email,roles:p.roles||[],perms:p.perms||[]}}catch{return null}}
 type AuthCtx={user:UserToken|null;accessToken:string|null;refreshToken:string|null;login:(e:string,p:string)=>Promise<void>;logout:()=>void;hasRole:(r:string)=>boolean;can:(p:string)=>boolean}
const Ctx=createContext<AuthCtx>({} as any)
export const useAuth=()=>useContext(Ctx)
export function AuthProvider({children}:{children:React.ReactNode}){const[accessToken,setAccessToken]=useState<string|null>(()=>localStorage.getItem('accessToken'));const[refreshToken,setRefreshToken]=useState<string|null>(()=>localStorage.getItem('refreshToken'));const[user,setUser]=useState<UserToken|null>(()=>accessToken?decodeJWT(accessToken):null);const login=async(email:string,password:string)=>{const{data}=await api.post('/auth/login',{email,password});localStorage.setItem('accessToken',data.accessToken);if(data.refreshToken)localStorage.setItem('refreshToken',data.refreshToken);setAccessToken(data.accessToken);setRefreshToken(data.refreshToken||null);setUser(decodeJWT(data.accessToken))};const logout=()=>{localStorage.removeItem('accessToken');localStorage.removeItem('refreshToken');setAccessToken(null);setRefreshToken(null);setUser(null)};const hasRole=(r:string)=>!!user?.roles?.includes(r);const can=(p:string)=>!!user?.perms?.includes(p);const value=useMemo(()=>({user,accessToken,refreshToken,login,logout,hasRole,can}),[user,accessToken,refreshToken]);return<Ctx.Provider value={value}>{children}</Ctx.Provider>}
